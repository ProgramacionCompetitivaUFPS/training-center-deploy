(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~060a3edb"],{

/***/ "3wJ9":
/*!***************************************************!*\
  !*** ./node_modules/blockly/python_compressed.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Do not edit this file; automatically generated by gulp.\n\n/* eslint-disable */\n;(function(root, factory) {\n  if (true) { // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./blockly_compressed.js */ \"6Y8/\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function(Blockly) {\n  'use strict';Blockly.Python=new Blockly.Generator(\"Python\");Blockly.Python.addReservedWords(\"False,None,True,and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,or,pass,print,raise,return,try,while,with,yield,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,ArithmeticError,AssertionError,AttributeError,BaseException,BlockingIOError,BrokenPipeError,BufferError,BytesWarning,ChildProcessError,ConnectionAbortedError,ConnectionError,ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,ImportWarning,IndentationError,IndexError,InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,PermissionError,ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,vars,xrange,zip\");\nBlockly.Python.ORDER_ATOMIC=0;Blockly.Python.ORDER_COLLECTION=1;Blockly.Python.ORDER_STRING_CONVERSION=1;Blockly.Python.ORDER_MEMBER=2.1;Blockly.Python.ORDER_FUNCTION_CALL=2.2;Blockly.Python.ORDER_EXPONENTIATION=3;Blockly.Python.ORDER_UNARY_SIGN=4;Blockly.Python.ORDER_BITWISE_NOT=4;Blockly.Python.ORDER_MULTIPLICATIVE=5;Blockly.Python.ORDER_ADDITIVE=6;Blockly.Python.ORDER_BITWISE_SHIFT=7;Blockly.Python.ORDER_BITWISE_AND=8;Blockly.Python.ORDER_BITWISE_XOR=9;Blockly.Python.ORDER_BITWISE_OR=10;\nBlockly.Python.ORDER_RELATIONAL=11;Blockly.Python.ORDER_LOGICAL_NOT=12;Blockly.Python.ORDER_LOGICAL_AND=13;Blockly.Python.ORDER_LOGICAL_OR=14;Blockly.Python.ORDER_CONDITIONAL=15;Blockly.Python.ORDER_LAMBDA=16;Blockly.Python.ORDER_NONE=99;\nBlockly.Python.ORDER_OVERRIDES=[[Blockly.Python.ORDER_FUNCTION_CALL,Blockly.Python.ORDER_MEMBER],[Blockly.Python.ORDER_FUNCTION_CALL,Blockly.Python.ORDER_FUNCTION_CALL],[Blockly.Python.ORDER_MEMBER,Blockly.Python.ORDER_MEMBER],[Blockly.Python.ORDER_MEMBER,Blockly.Python.ORDER_FUNCTION_CALL],[Blockly.Python.ORDER_LOGICAL_NOT,Blockly.Python.ORDER_LOGICAL_NOT],[Blockly.Python.ORDER_LOGICAL_AND,Blockly.Python.ORDER_LOGICAL_AND],[Blockly.Python.ORDER_LOGICAL_OR,Blockly.Python.ORDER_LOGICAL_OR]];\nBlockly.Python.init=function(a){Blockly.Python.PASS=this.INDENT+\"pass\\n\";Blockly.Python.definitions_=Object.create(null);Blockly.Python.functionNames_=Object.create(null);Blockly.Python.variableDB_?Blockly.Python.variableDB_.reset():Blockly.Python.variableDB_=new Blockly.Names(Blockly.Python.RESERVED_WORDS_);Blockly.Python.variableDB_.setVariableMap(a.getVariableMap());for(var b=[],c=Blockly.Variables.allDeveloperVariables(a),d=0;d<c.length;d++)b.push(Blockly.Python.variableDB_.getName(c[d],Blockly.Names.DEVELOPER_VARIABLE_TYPE)+\n\" = None\");a=Blockly.Variables.allUsedVarModels(a);for(d=0;d<a.length;d++)b.push(Blockly.Python.variableDB_.getName(a[d].getId(),Blockly.VARIABLE_CATEGORY_NAME)+\" = None\");Blockly.Python.definitions_.variables=b.join(\"\\n\")};\nBlockly.Python.finish=function(a){var b=[],c=[],d;for(d in Blockly.Python.definitions_){var e=Blockly.Python.definitions_[d];e.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/)?b.push(e):c.push(e)}delete Blockly.Python.definitions_;delete Blockly.Python.functionNames_;Blockly.Python.variableDB_.reset();return(b.join(\"\\n\")+\"\\n\\n\"+c.join(\"\\n\\n\")).replace(/\\n\\n+/g,\"\\n\\n\").replace(/\\n*$/,\"\\n\\n\\n\")+a};Blockly.Python.scrubNakedValue=function(a){return a+\"\\n\"};\nBlockly.Python.quote_=function(a){a=a.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\n/g,\"\\\\\\n\");var b=\"'\";-1!==a.indexOf(\"'\")&&(-1===a.indexOf('\"')?b='\"':a=a.replace(/'/g,\"\\\\'\"));return b+a+b};Blockly.Python.multiline_quote_=function(a){return a.split(/\\n/g).map(Blockly.Python.quote_).join(\" + '\\\\n' + \\n\")};\nBlockly.Python.scrub_=function(a,b,c){var d=\"\";if(!a.outputConnection||!a.outputConnection.targetConnection){var e=a.getCommentText();e&&(e=Blockly.utils.string.wrap(e,Blockly.Python.COMMENT_WRAP-3),d+=Blockly.Python.prefixLines(e+\"\\n\",\"# \"));for(var f=0;f<a.inputList.length;f++)a.inputList[f].type==Blockly.INPUT_VALUE&&(e=a.inputList[f].connection.targetBlock())&&(e=Blockly.Python.allNestedComments(e))&&(d+=Blockly.Python.prefixLines(e,\"# \"))}a=a.nextConnection&&a.nextConnection.targetBlock();c=\nc?\"\":Blockly.Python.blockToCode(a);return d+b+c};Blockly.Python.getAdjustedInt=function(a,b,c,d){c=c||0;a.workspace.options.oneBasedIndex&&c--;var e=a.workspace.options.oneBasedIndex?\"1\":\"0\";a=Blockly.Python.valueToCode(a,b,c?Blockly.Python.ORDER_ADDITIVE:Blockly.Python.ORDER_NONE)||e;Blockly.isNumber(a)?(a=parseInt(a,10)+c,d&&(a=-a)):(a=0<c?\"int(\"+a+\" + \"+c+\")\":0>c?\"int(\"+a+\" - \"+-c+\")\":\"int(\"+a+\")\",d&&(a=\"-\"+a));return a};Blockly.Python.colour={};Blockly.Python.colour_picker=function(a){return[Blockly.Python.quote_(a.getFieldValue(\"COLOUR\")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.colour_random=function(a){Blockly.Python.definitions_.import_random=\"import random\";return[\"'#%06x' % random.randint(0, 2**24 - 1)\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.colour_rgb=function(a){var b=Blockly.Python.provideFunction_(\"colour_rgb\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(r, g, b):\",\"  r = round(min(100, max(0, r)) * 2.55)\",\"  g = round(min(100, max(0, g)) * 2.55)\",\"  b = round(min(100, max(0, b)) * 2.55)\",\"  return '#%02x%02x%02x' % (r, g, b)\"]),c=Blockly.Python.valueToCode(a,\"RED\",Blockly.Python.ORDER_NONE)||0,d=Blockly.Python.valueToCode(a,\"GREEN\",Blockly.Python.ORDER_NONE)||0;a=Blockly.Python.valueToCode(a,\"BLUE\",Blockly.Python.ORDER_NONE)||\n0;return[b+\"(\"+c+\", \"+d+\", \"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.colour_blend=function(a){var b=Blockly.Python.provideFunction_(\"colour_blend\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(colour1, colour2, ratio):\",\"  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\",\"  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\",\"  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\",\"  ratio = min(1, max(0, ratio))\",\"  r = round(r1 * (1 - ratio) + r2 * ratio)\",\"  g = round(g1 * (1 - ratio) + g2 * ratio)\",\"  b = round(b1 * (1 - ratio) + b2 * ratio)\",\n\"  return '#%02x%02x%02x' % (r, g, b)\"]),c=Blockly.Python.valueToCode(a,\"COLOUR1\",Blockly.Python.ORDER_NONE)||\"'#000000'\",d=Blockly.Python.valueToCode(a,\"COLOUR2\",Blockly.Python.ORDER_NONE)||\"'#000000'\";a=Blockly.Python.valueToCode(a,\"RATIO\",Blockly.Python.ORDER_NONE)||0;return[b+\"(\"+c+\", \"+d+\", \"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.lists={};Blockly.Python.lists_create_empty=function(a){return[\"[]\",Blockly.Python.ORDER_ATOMIC]};Blockly.Python.lists_create_with=function(a){for(var b=Array(a.itemCount_),c=0;c<a.itemCount_;c++)b[c]=Blockly.Python.valueToCode(a,\"ADD\"+c,Blockly.Python.ORDER_NONE)||\"None\";return[\"[\"+b.join(\", \")+\"]\",Blockly.Python.ORDER_ATOMIC]};\nBlockly.Python.lists_repeat=function(a){var b=Blockly.Python.valueToCode(a,\"ITEM\",Blockly.Python.ORDER_NONE)||\"None\";a=Blockly.Python.valueToCode(a,\"NUM\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\";return[\"[\"+b+\"] * \"+a,Blockly.Python.ORDER_MULTIPLICATIVE]};Blockly.Python.lists_length=function(a){return[\"len(\"+(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"[]\")+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.lists_isEmpty=function(a){return[\"not len(\"+(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"[]\")+\")\",Blockly.Python.ORDER_LOGICAL_NOT]};\nBlockly.Python.lists_indexOf=function(a){var b=Blockly.Python.valueToCode(a,\"FIND\",Blockly.Python.ORDER_NONE)||\"[]\",c=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"''\";if(a.workspace.options.oneBasedIndex)var d=\" 0\",e=\" + 1\",f=\"\";else d=\" -1\",e=\"\",f=\" - 1\";if(\"FIRST\"==a.getFieldValue(\"END\"))return a=Blockly.Python.provideFunction_(\"first_index\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(my_list, elem):\",\"  try: index = my_list.index(elem)\"+e,\"  except: index =\"+d,\"  return index\"]),\n[a+\"(\"+c+\", \"+b+\")\",Blockly.Python.ORDER_FUNCTION_CALL];a=Blockly.Python.provideFunction_(\"last_index\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(my_list, elem):\",\"  try: index = len(my_list) - my_list[::-1].index(elem)\"+f,\"  except: index =\"+d,\"  return index\"]);return[a+\"(\"+c+\", \"+b+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.lists_getIndex=function(a){var b=a.getFieldValue(\"MODE\")||\"GET\",c=a.getFieldValue(\"WHERE\")||\"FROM_START\",d=Blockly.Python.valueToCode(a,\"VALUE\",\"RANDOM\"==c?Blockly.Python.ORDER_NONE:Blockly.Python.ORDER_MEMBER)||\"[]\";switch(c){case \"FIRST\":if(\"GET\"==b)return[d+\"[0]\",Blockly.Python.ORDER_MEMBER];if(\"GET_REMOVE\"==b)return[d+\".pop(0)\",Blockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==b)return d+\".pop(0)\\n\";break;case \"LAST\":if(\"GET\"==b)return[d+\"[-1]\",Blockly.Python.ORDER_MEMBER];if(\"GET_REMOVE\"==\nb)return[d+\".pop()\",Blockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==b)return d+\".pop()\\n\";break;case \"FROM_START\":a=Blockly.Python.getAdjustedInt(a,\"AT\");if(\"GET\"==b)return[d+\"[\"+a+\"]\",Blockly.Python.ORDER_MEMBER];if(\"GET_REMOVE\"==b)return[d+\".pop(\"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==b)return d+\".pop(\"+a+\")\\n\";break;case \"FROM_END\":a=Blockly.Python.getAdjustedInt(a,\"AT\",1,!0);if(\"GET\"==b)return[d+\"[\"+a+\"]\",Blockly.Python.ORDER_MEMBER];if(\"GET_REMOVE\"==b)return[d+\".pop(\"+a+\")\",\nBlockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==b)return d+\".pop(\"+a+\")\\n\";break;case \"RANDOM\":Blockly.Python.definitions_.import_random=\"import random\";if(\"GET\"==b)return[\"random.choice(\"+d+\")\",Blockly.Python.ORDER_FUNCTION_CALL];d=Blockly.Python.provideFunction_(\"lists_remove_random_item\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(myList):\",\"  x = int(random.random() * len(myList))\",\"  return myList.pop(x)\"])+\"(\"+d+\")\";if(\"GET_REMOVE\"==b)return[d,Blockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==\nb)return d+\"\\n\"}throw Error(\"Unhandled combination (lists_getIndex).\");};\nBlockly.Python.lists_setIndex=function(a){var b=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_MEMBER)||\"[]\",c=a.getFieldValue(\"MODE\")||\"GET\",d=a.getFieldValue(\"WHERE\")||\"FROM_START\",e=Blockly.Python.valueToCode(a,\"TO\",Blockly.Python.ORDER_NONE)||\"None\";switch(d){case \"FIRST\":if(\"SET\"==c)return b+\"[0] = \"+e+\"\\n\";if(\"INSERT\"==c)return b+\".insert(0, \"+e+\")\\n\";break;case \"LAST\":if(\"SET\"==c)return b+\"[-1] = \"+e+\"\\n\";if(\"INSERT\"==c)return b+\".append(\"+e+\")\\n\";break;case \"FROM_START\":a=Blockly.Python.getAdjustedInt(a,\n\"AT\");if(\"SET\"==c)return b+\"[\"+a+\"] = \"+e+\"\\n\";if(\"INSERT\"==c)return b+\".insert(\"+a+\", \"+e+\")\\n\";break;case \"FROM_END\":a=Blockly.Python.getAdjustedInt(a,\"AT\",1,!0);if(\"SET\"==c)return b+\"[\"+a+\"] = \"+e+\"\\n\";if(\"INSERT\"==c)return b+\".insert(\"+a+\", \"+e+\")\\n\";break;case \"RANDOM\":Blockly.Python.definitions_.import_random=\"import random\";b.match(/^\\w+$/)?a=\"\":(a=Blockly.Python.variableDB_.getDistinctName(\"tmp_list\",Blockly.VARIABLE_CATEGORY_NAME),d=a+\" = \"+b+\"\\n\",b=a,a=d);d=Blockly.Python.variableDB_.getDistinctName(\"tmp_x\",\nBlockly.VARIABLE_CATEGORY_NAME);a+=d+\" = int(random.random() * len(\"+b+\"))\\n\";if(\"SET\"==c)return a+(b+\"[\"+d+\"] = \"+e+\"\\n\");if(\"INSERT\"==c)return a+(b+\".insert(\"+d+\", \"+e+\")\\n\")}throw Error(\"Unhandled combination (lists_setIndex).\");};\nBlockly.Python.lists_getSublist=function(a){var b=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_MEMBER)||\"[]\",c=a.getFieldValue(\"WHERE1\"),d=a.getFieldValue(\"WHERE2\");switch(c){case \"FROM_START\":c=Blockly.Python.getAdjustedInt(a,\"AT1\");\"0\"==c&&(c=\"\");break;case \"FROM_END\":c=Blockly.Python.getAdjustedInt(a,\"AT1\",1,!0);break;case \"FIRST\":c=\"\";break;default:throw Error(\"Unhandled option (lists_getSublist)\");}switch(d){case \"FROM_START\":a=Blockly.Python.getAdjustedInt(a,\"AT2\",1);break;case \"FROM_END\":a=\nBlockly.Python.getAdjustedInt(a,\"AT2\",0,!0);Blockly.isNumber(String(a))?\"0\"==a&&(a=\"\"):(Blockly.Python.definitions_.import_sys=\"import sys\",a+=\" or sys.maxsize\");break;case \"LAST\":a=\"\";break;default:throw Error(\"Unhandled option (lists_getSublist)\");}return[b+\"[\"+c+\" : \"+a+\"]\",Blockly.Python.ORDER_MEMBER]};\nBlockly.Python.lists_sort=function(a){var b=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_NONE)||\"[]\",c=a.getFieldValue(\"TYPE\");a=\"1\"===a.getFieldValue(\"DIRECTION\")?\"False\":\"True\";return[Blockly.Python.provideFunction_(\"lists_sort\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(my_list, type, reverse):\",\"  def try_float(s):\",\"    try:\",\"      return float(s)\",\"    except:\",\"      return 0\",\"  key_funcs = {\",'    \"NUMERIC\": try_float,','    \"TEXT\": str,','    \"IGNORE_CASE\": lambda s: str(s).lower()',\n\"  }\",\"  key_func = key_funcs[type]\",\"  list_cpy = list(my_list)\",\"  return sorted(list_cpy, key=key_func, reverse=reverse)\"])+\"(\"+b+', \"'+c+'\", '+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.lists_split=function(a){var b=a.getFieldValue(\"MODE\");if(\"SPLIT\"==b)b=Blockly.Python.valueToCode(a,\"INPUT\",Blockly.Python.ORDER_MEMBER)||\"''\",a=Blockly.Python.valueToCode(a,\"DELIM\",Blockly.Python.ORDER_NONE),a=b+\".split(\"+a+\")\";else if(\"JOIN\"==b)b=Blockly.Python.valueToCode(a,\"INPUT\",Blockly.Python.ORDER_NONE)||\"[]\",a=Blockly.Python.valueToCode(a,\"DELIM\",Blockly.Python.ORDER_MEMBER)||\"''\",a=a+\".join(\"+b+\")\";else throw Error(\"Unknown mode: \"+b);return[a,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.lists_reverse=function(a){return[\"list(reversed(\"+(Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_NONE)||\"[]\")+\"))\",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.logic={};\nBlockly.Python.controls_if=function(a){var b=0,c=\"\";Blockly.Python.STATEMENT_PREFIX&&(c+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));do{var d=Blockly.Python.valueToCode(a,\"IF\"+b,Blockly.Python.ORDER_NONE)||\"False\";var e=Blockly.Python.statementToCode(a,\"DO\"+b)||Blockly.Python.PASS;Blockly.Python.STATEMENT_SUFFIX&&(e=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT)+e);c+=(0==b?\"if \":\"elif \")+d+\":\\n\"+e;++b}while(a.getInput(\"IF\"+\nb));if(a.getInput(\"ELSE\")||Blockly.Python.STATEMENT_SUFFIX)e=Blockly.Python.statementToCode(a,\"ELSE\")||Blockly.Python.PASS,Blockly.Python.STATEMENT_SUFFIX&&(e=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT)+e),c+=\"else:\\n\"+e;return c};Blockly.Python.controls_ifelse=Blockly.Python.controls_if;\nBlockly.Python.logic_compare=function(a){var b={EQ:\"==\",NEQ:\"!=\",LT:\"<\",LTE:\"<=\",GT:\">\",GTE:\">=\"}[a.getFieldValue(\"OP\")],c=Blockly.Python.ORDER_RELATIONAL,d=Blockly.Python.valueToCode(a,\"A\",c)||\"0\";a=Blockly.Python.valueToCode(a,\"B\",c)||\"0\";return[d+\" \"+b+\" \"+a,c]};\nBlockly.Python.logic_operation=function(a){var b=\"AND\"==a.getFieldValue(\"OP\")?\"and\":\"or\",c=\"and\"==b?Blockly.Python.ORDER_LOGICAL_AND:Blockly.Python.ORDER_LOGICAL_OR,d=Blockly.Python.valueToCode(a,\"A\",c);a=Blockly.Python.valueToCode(a,\"B\",c);if(d||a){var e=\"and\"==b?\"True\":\"False\";d||(d=e);a||(a=e)}else a=d=\"False\";return[d+\" \"+b+\" \"+a,c]};Blockly.Python.logic_negate=function(a){return[\"not \"+(Blockly.Python.valueToCode(a,\"BOOL\",Blockly.Python.ORDER_LOGICAL_NOT)||\"True\"),Blockly.Python.ORDER_LOGICAL_NOT]};\nBlockly.Python.logic_boolean=function(a){return[\"TRUE\"==a.getFieldValue(\"BOOL\")?\"True\":\"False\",Blockly.Python.ORDER_ATOMIC]};Blockly.Python.logic_null=function(a){return[\"None\",Blockly.Python.ORDER_ATOMIC]};\nBlockly.Python.logic_ternary=function(a){var b=Blockly.Python.valueToCode(a,\"IF\",Blockly.Python.ORDER_CONDITIONAL)||\"False\",c=Blockly.Python.valueToCode(a,\"THEN\",Blockly.Python.ORDER_CONDITIONAL)||\"None\";a=Blockly.Python.valueToCode(a,\"ELSE\",Blockly.Python.ORDER_CONDITIONAL)||\"None\";return[c+\" if \"+b+\" else \"+a,Blockly.Python.ORDER_CONDITIONAL]};Blockly.Python.loops={};Blockly.Python.controls_repeat_ext=function(a){var b=a.getField(\"TIMES\")?String(parseInt(a.getFieldValue(\"TIMES\"),10)):Blockly.Python.valueToCode(a,\"TIMES\",Blockly.Python.ORDER_NONE)||\"0\";b=Blockly.isNumber(b)?parseInt(b,10):\"int(\"+b+\")\";var c=Blockly.Python.statementToCode(a,\"DO\");c=Blockly.Python.addLoopTrap(c,a)||Blockly.Python.PASS;return\"for \"+Blockly.Python.variableDB_.getDistinctName(\"count\",Blockly.VARIABLE_CATEGORY_NAME)+\" in range(\"+b+\"):\\n\"+c};\nBlockly.Python.controls_repeat=Blockly.Python.controls_repeat_ext;Blockly.Python.controls_whileUntil=function(a){var b=\"UNTIL\"==a.getFieldValue(\"MODE\"),c=Blockly.Python.valueToCode(a,\"BOOL\",b?Blockly.Python.ORDER_LOGICAL_NOT:Blockly.Python.ORDER_NONE)||\"False\",d=Blockly.Python.statementToCode(a,\"DO\");d=Blockly.Python.addLoopTrap(d,a)||Blockly.Python.PASS;b&&(c=\"not \"+c);return\"while \"+c+\":\\n\"+d};\nBlockly.Python.controls_for=function(a){var b=Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME),c=Blockly.Python.valueToCode(a,\"FROM\",Blockly.Python.ORDER_NONE)||\"0\",d=Blockly.Python.valueToCode(a,\"TO\",Blockly.Python.ORDER_NONE)||\"0\",e=Blockly.Python.valueToCode(a,\"BY\",Blockly.Python.ORDER_NONE)||\"1\",f=Blockly.Python.statementToCode(a,\"DO\");f=Blockly.Python.addLoopTrap(f,a)||Blockly.Python.PASS;var n=\"\",k=function(){return Blockly.Python.provideFunction_(\"upRange\",\n[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(start, stop, step):\",\"  while start <= stop:\",\"    yield start\",\"    start += abs(step)\"])},h=function(){return Blockly.Python.provideFunction_(\"downRange\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(start, stop, step):\",\"  while start >= stop:\",\"    yield start\",\"    start -= abs(step)\"])};a=function(g,l,p){return\"(\"+g+\" <= \"+l+\") and \"+k()+\"(\"+g+\", \"+l+\", \"+p+\") or \"+h()+\"(\"+g+\", \"+l+\", \"+p+\")\"};if(Blockly.isNumber(c)&&Blockly.isNumber(d)&&\nBlockly.isNumber(e))c=Number(c),d=Number(d),e=Math.abs(Number(e)),0===c%1&&0===d%1&&0===e%1?(c<=d?(d++,a=0==c&&1==e?d:c+\", \"+d,1!=e&&(a+=\", \"+e)):(d--,a=c+\", \"+d+\", -\"+e),a=\"range(\"+a+\")\"):(a=c<d?k():h(),a+=\"(\"+c+\", \"+d+\", \"+e+\")\");else{var m=function(g,l){Blockly.isNumber(g)?g=Number(g):g.match(/^\\w+$/)?g=\"float(\"+g+\")\":(l=Blockly.Python.variableDB_.getDistinctName(b+l,Blockly.VARIABLE_CATEGORY_NAME),n+=l+\" = float(\"+g+\")\\n\",g=l);return g};c=m(c,\"_start\");d=m(d,\"_end\");e=m(e,\"_inc\");\"number\"==typeof c&&\n\"number\"==typeof d?(a=c<d?k():h(),a+=\"(\"+c+\", \"+d+\", \"+e+\")\"):a=a(c,d,e)}return n+=\"for \"+b+\" in \"+a+\":\\n\"+f};Blockly.Python.controls_forEach=function(a){var b=Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME),c=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_RELATIONAL)||\"[]\",d=Blockly.Python.statementToCode(a,\"DO\");d=Blockly.Python.addLoopTrap(d,a)||Blockly.Python.PASS;return\"for \"+b+\" in \"+c+\":\\n\"+d};\nBlockly.Python.controls_flow_statements=function(a){var b=\"\";Blockly.Python.STATEMENT_PREFIX&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));Blockly.Python.STATEMENT_SUFFIX&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a));if(Blockly.Python.STATEMENT_PREFIX){var c=Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);c&&!c.suppressPrefixSuffix&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,c))}switch(a.getFieldValue(\"FLOW\")){case \"BREAK\":return b+\n\"break\\n\";case \"CONTINUE\":return b+\"continue\\n\"}throw Error(\"Unknown flow statement.\");};Blockly.Python.math={};Blockly.Python.addReservedWords(\"math,random,Number\");Blockly.Python.math_number=function(a){a=Number(a.getFieldValue(\"NUM\"));if(Infinity==a){a='float(\"inf\")';var b=Blockly.Python.ORDER_FUNCTION_CALL}else-Infinity==a?(a='-float(\"inf\")',b=Blockly.Python.ORDER_UNARY_SIGN):b=0>a?Blockly.Python.ORDER_UNARY_SIGN:Blockly.Python.ORDER_ATOMIC;return[a,b]};\nBlockly.Python.math_arithmetic=function(a){var b={ADD:[\" + \",Blockly.Python.ORDER_ADDITIVE],MINUS:[\" - \",Blockly.Python.ORDER_ADDITIVE],MULTIPLY:[\" * \",Blockly.Python.ORDER_MULTIPLICATIVE],DIVIDE:[\" / \",Blockly.Python.ORDER_MULTIPLICATIVE],POWER:[\" ** \",Blockly.Python.ORDER_EXPONENTIATION]}[a.getFieldValue(\"OP\")],c=b[0];b=b[1];var d=Blockly.Python.valueToCode(a,\"A\",b)||\"0\";a=Blockly.Python.valueToCode(a,\"B\",b)||\"0\";return[d+c+a,b]};\nBlockly.Python.math_single=function(a){var b=a.getFieldValue(\"OP\");if(\"NEG\"==b){var c=Blockly.Python.valueToCode(a,\"NUM\",Blockly.Python.ORDER_UNARY_SIGN)||\"0\";return[\"-\"+c,Blockly.Python.ORDER_UNARY_SIGN]}Blockly.Python.definitions_.import_math=\"import math\";a=\"SIN\"==b||\"COS\"==b||\"TAN\"==b?Blockly.Python.valueToCode(a,\"NUM\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\":Blockly.Python.valueToCode(a,\"NUM\",Blockly.Python.ORDER_NONE)||\"0\";switch(b){case \"ABS\":c=\"math.fabs(\"+a+\")\";break;case \"ROOT\":c=\"math.sqrt(\"+\na+\")\";break;case \"LN\":c=\"math.log(\"+a+\")\";break;case \"LOG10\":c=\"math.log10(\"+a+\")\";break;case \"EXP\":c=\"math.exp(\"+a+\")\";break;case \"POW10\":c=\"math.pow(10,\"+a+\")\";break;case \"ROUND\":c=\"round(\"+a+\")\";break;case \"ROUNDUP\":c=\"math.ceil(\"+a+\")\";break;case \"ROUNDDOWN\":c=\"math.floor(\"+a+\")\";break;case \"SIN\":c=\"math.sin(\"+a+\" / 180.0 * math.pi)\";break;case \"COS\":c=\"math.cos(\"+a+\" / 180.0 * math.pi)\";break;case \"TAN\":c=\"math.tan(\"+a+\" / 180.0 * math.pi)\"}if(c)return[c,Blockly.Python.ORDER_FUNCTION_CALL];switch(b){case \"ASIN\":c=\n\"math.asin(\"+a+\") / math.pi * 180\";break;case \"ACOS\":c=\"math.acos(\"+a+\") / math.pi * 180\";break;case \"ATAN\":c=\"math.atan(\"+a+\") / math.pi * 180\";break;default:throw Error(\"Unknown math operator: \"+b);}return[c,Blockly.Python.ORDER_MULTIPLICATIVE]};\nBlockly.Python.math_constant=function(a){var b={PI:[\"math.pi\",Blockly.Python.ORDER_MEMBER],E:[\"math.e\",Blockly.Python.ORDER_MEMBER],GOLDEN_RATIO:[\"(1 + math.sqrt(5)) / 2\",Blockly.Python.ORDER_MULTIPLICATIVE],SQRT2:[\"math.sqrt(2)\",Blockly.Python.ORDER_MEMBER],SQRT1_2:[\"math.sqrt(1.0 / 2)\",Blockly.Python.ORDER_MEMBER],INFINITY:[\"float('inf')\",Blockly.Python.ORDER_ATOMIC]};a=a.getFieldValue(\"CONSTANT\");\"INFINITY\"!=a&&(Blockly.Python.definitions_.import_math=\"import math\");return b[a]};\nBlockly.Python.math_number_property=function(a){var b=Blockly.Python.valueToCode(a,\"NUMBER_TO_CHECK\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\",c=a.getFieldValue(\"PROPERTY\");if(\"PRIME\"==c)return Blockly.Python.definitions_.import_math=\"import math\",Blockly.Python.definitions_.from_numbers_import_Number=\"from numbers import Number\",[Blockly.Python.provideFunction_(\"math_isPrime\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(n):\",\"  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\",\n\"  # If n is not a number but a string, try parsing it.\",\"  if not isinstance(n, Number):\",\"    try:\",\"      n = float(n)\",\"    except:\",\"      return False\",\"  if n == 2 or n == 3:\",\"    return True\",\"  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\",\"  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\",\"    return False\",\"  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\",\"  for x in range(6, int(math.sqrt(n)) + 2, 6):\",\"    if n % (x - 1) == 0 or n % (x + 1) == 0:\",\n\"      return False\",\"  return True\"])+\"(\"+b+\")\",Blockly.Python.ORDER_FUNCTION_CALL];switch(c){case \"EVEN\":var d=b+\" % 2 == 0\";break;case \"ODD\":d=b+\" % 2 == 1\";break;case \"WHOLE\":d=b+\" % 1 == 0\";break;case \"POSITIVE\":d=b+\" > 0\";break;case \"NEGATIVE\":d=b+\" < 0\";break;case \"DIVISIBLE_BY\":a=Blockly.Python.valueToCode(a,\"DIVISOR\",Blockly.Python.ORDER_MULTIPLICATIVE);if(!a||\"0\"==a)return[\"False\",Blockly.Python.ORDER_ATOMIC];d=b+\" % \"+a+\" == 0\"}return[d,Blockly.Python.ORDER_RELATIONAL]};\nBlockly.Python.math_change=function(a){Blockly.Python.definitions_.from_numbers_import_Number=\"from numbers import Number\";var b=Blockly.Python.valueToCode(a,\"DELTA\",Blockly.Python.ORDER_ADDITIVE)||\"0\";a=Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME);return a+\" = (\"+a+\" if isinstance(\"+a+\", Number) else 0) + \"+b+\"\\n\"};Blockly.Python.math_round=Blockly.Python.math_single;Blockly.Python.math_trig=Blockly.Python.math_single;\nBlockly.Python.math_on_list=function(a){var b=a.getFieldValue(\"OP\");a=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_NONE)||\"[]\";switch(b){case \"SUM\":b=\"sum(\"+a+\")\";break;case \"MIN\":b=\"min(\"+a+\")\";break;case \"MAX\":b=\"max(\"+a+\")\";break;case \"AVERAGE\":Blockly.Python.definitions_.from_numbers_import_Number=\"from numbers import Number\";b=Blockly.Python.provideFunction_(\"math_mean\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(myList):\",\"  localList = [e for e in myList if isinstance(e, Number)]\",\n\"  if not localList: return\",\"  return float(sum(localList)) / len(localList)\"]);b=b+\"(\"+a+\")\";break;case \"MEDIAN\":Blockly.Python.definitions_.from_numbers_import_Number=\"from numbers import Number\";b=Blockly.Python.provideFunction_(\"math_median\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(myList):\",\"  localList = sorted([e for e in myList if isinstance(e, Number)])\",\"  if not localList: return\",\"  if len(localList) % 2 == 0:\",\"    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\",\n\"  else:\",\"    return localList[(len(localList) - 1) // 2]\"]);b=b+\"(\"+a+\")\";break;case \"MODE\":b=Blockly.Python.provideFunction_(\"math_modes\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(some_list):\",\"  modes = []\",\"  # Using a lists of [item, count] to keep count rather than dict\",'  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.',\"  counts = []\",\"  maxCount = 1\",\"  for item in some_list:\",\"    found = False\",\"    for count in counts:\",\"      if count[0] == item:\",\n\"        count[1] += 1\",\"        maxCount = max(maxCount, count[1])\",\"        found = True\",\"    if not found:\",\"      counts.append([item, 1])\",\"  for counted_item, item_count in counts:\",\"    if item_count == maxCount:\",\"      modes.append(counted_item)\",\"  return modes\"]);b=b+\"(\"+a+\")\";break;case \"STD_DEV\":Blockly.Python.definitions_.import_math=\"import math\";b=Blockly.Python.provideFunction_(\"math_standard_deviation\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(numbers):\",\"  n = len(numbers)\",\n\"  if n == 0: return\",\"  mean = float(sum(numbers)) / n\",\"  variance = sum((x - mean) ** 2 for x in numbers) / n\",\"  return math.sqrt(variance)\"]);b=b+\"(\"+a+\")\";break;case \"RANDOM\":Blockly.Python.definitions_.import_random=\"import random\";b=\"random.choice(\"+a+\")\";break;default:throw Error(\"Unknown operator: \"+b);}return[b,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.math_modulo=function(a){var b=Blockly.Python.valueToCode(a,\"DIVIDEND\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\";a=Blockly.Python.valueToCode(a,\"DIVISOR\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\";return[b+\" % \"+a,Blockly.Python.ORDER_MULTIPLICATIVE]};\nBlockly.Python.math_constrain=function(a){var b=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"0\",c=Blockly.Python.valueToCode(a,\"LOW\",Blockly.Python.ORDER_NONE)||\"0\";a=Blockly.Python.valueToCode(a,\"HIGH\",Blockly.Python.ORDER_NONE)||\"float('inf')\";return[\"min(max(\"+b+\", \"+c+\"), \"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.math_random_int=function(a){Blockly.Python.definitions_.import_random=\"import random\";var b=Blockly.Python.valueToCode(a,\"FROM\",Blockly.Python.ORDER_NONE)||\"0\";a=Blockly.Python.valueToCode(a,\"TO\",Blockly.Python.ORDER_NONE)||\"0\";return[\"random.randint(\"+b+\", \"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.math_random_float=function(a){Blockly.Python.definitions_.import_random=\"import random\";return[\"random.random()\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.math_atan2=function(a){Blockly.Python.definitions_.import_math=\"import math\";var b=Blockly.Python.valueToCode(a,\"X\",Blockly.Python.ORDER_NONE)||\"0\";return[\"math.atan2(\"+(Blockly.Python.valueToCode(a,\"Y\",Blockly.Python.ORDER_NONE)||\"0\")+\", \"+b+\") / math.pi * 180\",Blockly.Python.ORDER_MULTIPLICATIVE]};Blockly.Python.procedures={};\nBlockly.Python.procedures_defreturn=function(a){for(var b=[],c,d=a.workspace,e=Blockly.Variables.allUsedVarModels(d)||[],f=0;c=e[f];f++)c=c.name,-1==a.getVars().indexOf(c)&&b.push(Blockly.Python.variableDB_.getName(c,Blockly.VARIABLE_CATEGORY_NAME));e=Blockly.Variables.allDeveloperVariables(d);for(f=0;f<e.length;f++)b.push(Blockly.Python.variableDB_.getName(e[f],Blockly.Names.DEVELOPER_VARIABLE_TYPE));b=b.length?Blockly.Python.INDENT+\"global \"+b.join(\", \")+\"\\n\":\"\";d=Blockly.Python.variableDB_.getName(a.getFieldValue(\"NAME\"),Blockly.PROCEDURE_CATEGORY_NAME);\nc=\"\";Blockly.Python.STATEMENT_PREFIX&&(c+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));Blockly.Python.STATEMENT_SUFFIX&&(c+=Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a));c&&(c=Blockly.Python.prefixLines(c,Blockly.Python.INDENT));var n=\"\";Blockly.Python.INFINITE_LOOP_TRAP&&(n=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.INFINITE_LOOP_TRAP,a),Blockly.Python.INDENT));var k=Blockly.Python.statementToCode(a,\"STACK\"),h=Blockly.Python.valueToCode(a,\"RETURN\",\nBlockly.Python.ORDER_NONE)||\"\",m=\"\";k&&h&&(m=c);h?h=Blockly.Python.INDENT+\"return \"+h+\"\\n\":k||(k=Blockly.Python.PASS);var g=[];e=a.getVars();for(f=0;f<e.length;f++)g[f]=Blockly.Python.variableDB_.getName(e[f],Blockly.VARIABLE_CATEGORY_NAME);b=\"def \"+d+\"(\"+g.join(\", \")+\"):\\n\"+b+c+n+k+m+h;b=Blockly.Python.scrub_(a,b);Blockly.Python.definitions_[\"%\"+d]=b;return null};Blockly.Python.procedures_defnoreturn=Blockly.Python.procedures_defreturn;\nBlockly.Python.procedures_callreturn=function(a){for(var b=Blockly.Python.variableDB_.getName(a.getFieldValue(\"NAME\"),Blockly.PROCEDURE_CATEGORY_NAME),c=[],d=a.getVars(),e=0;e<d.length;e++)c[e]=Blockly.Python.valueToCode(a,\"ARG\"+e,Blockly.Python.ORDER_NONE)||\"None\";return[b+\"(\"+c.join(\", \")+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.procedures_callnoreturn=function(a){return Blockly.Python.procedures_callreturn(a)[0]+\"\\n\"};\nBlockly.Python.procedures_ifreturn=function(a){var b=\"if \"+(Blockly.Python.valueToCode(a,\"CONDITION\",Blockly.Python.ORDER_NONE)||\"False\")+\":\\n\";Blockly.Python.STATEMENT_SUFFIX&&(b+=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT));a.hasReturnValue_?(a=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"None\",b+=Blockly.Python.INDENT+\"return \"+a+\"\\n\"):b+=Blockly.Python.INDENT+\"return\\n\";return b};Blockly.Python.texts={};Blockly.Python.text=function(a){return[Blockly.Python.quote_(a.getFieldValue(\"TEXT\")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.text_multiline=function(a){return[Blockly.Python.multiline_quote_(a.getFieldValue(\"TEXT\")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.text.forceString_=function(a){return Blockly.Python.text.forceString_.strRegExp.test(a)?a:\"str(\"+a+\")\"};Blockly.Python.text.forceString_.strRegExp=/^\\s*'([^']|\\\\')*'\\s*$/;\nBlockly.Python.text_join=function(a){switch(a.itemCount_){case 0:return[\"''\",Blockly.Python.ORDER_ATOMIC];case 1:return a=Blockly.Python.valueToCode(a,\"ADD0\",Blockly.Python.ORDER_NONE)||\"''\",a=Blockly.Python.text.forceString_(a),[a,Blockly.Python.ORDER_FUNCTION_CALL];case 2:var b=Blockly.Python.valueToCode(a,\"ADD0\",Blockly.Python.ORDER_NONE)||\"''\";a=Blockly.Python.valueToCode(a,\"ADD1\",Blockly.Python.ORDER_NONE)||\"''\";a=Blockly.Python.text.forceString_(b)+\" + \"+Blockly.Python.text.forceString_(a);\nreturn[a,Blockly.Python.ORDER_ADDITIVE];default:b=[];for(var c=0;c<a.itemCount_;c++)b[c]=Blockly.Python.valueToCode(a,\"ADD\"+c,Blockly.Python.ORDER_NONE)||\"''\";a=Blockly.Python.variableDB_.getDistinctName(\"x\",Blockly.VARIABLE_CATEGORY_NAME);a=\"''.join([str(\"+a+\") for \"+a+\" in [\"+b.join(\", \")+\"]])\";return[a,Blockly.Python.ORDER_FUNCTION_CALL]}};\nBlockly.Python.text_append=function(a){var b=Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME);a=Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_NONE)||\"''\";return b+\" = str(\"+b+\") + \"+Blockly.Python.text.forceString_(a)+\"\\n\"};Blockly.Python.text_length=function(a){return[\"len(\"+(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"''\")+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.text_isEmpty=function(a){return[\"not len(\"+(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"''\")+\")\",Blockly.Python.ORDER_LOGICAL_NOT]};\nBlockly.Python.text_indexOf=function(a){var b=\"FIRST\"==a.getFieldValue(\"END\")?\"find\":\"rfind\",c=Blockly.Python.valueToCode(a,\"FIND\",Blockly.Python.ORDER_NONE)||\"''\";b=(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_MEMBER)||\"''\")+\".\"+b+\"(\"+c+\")\";return a.workspace.options.oneBasedIndex?[b+\" + 1\",Blockly.Python.ORDER_ADDITIVE]:[b,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.text_charAt=function(a){var b=a.getFieldValue(\"WHERE\")||\"FROM_START\",c=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_MEMBER)||\"''\";switch(b){case \"FIRST\":return[c+\"[0]\",Blockly.Python.ORDER_MEMBER];case \"LAST\":return[c+\"[-1]\",Blockly.Python.ORDER_MEMBER];case \"FROM_START\":return a=Blockly.Python.getAdjustedInt(a,\"AT\"),[c+\"[\"+a+\"]\",Blockly.Python.ORDER_MEMBER];case \"FROM_END\":return a=Blockly.Python.getAdjustedInt(a,\"AT\",1,!0),[c+\"[\"+a+\"]\",Blockly.Python.ORDER_MEMBER];case \"RANDOM\":return Blockly.Python.definitions_.import_random=\n\"import random\",[Blockly.Python.provideFunction_(\"text_random_letter\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(text):\",\"  x = int(random.random() * len(text))\",\"  return text[x];\"])+\"(\"+c+\")\",Blockly.Python.ORDER_FUNCTION_CALL]}throw Error(\"Unhandled option (text_charAt).\");};\nBlockly.Python.text_getSubstring=function(a){var b=a.getFieldValue(\"WHERE1\"),c=a.getFieldValue(\"WHERE2\"),d=Blockly.Python.valueToCode(a,\"STRING\",Blockly.Python.ORDER_MEMBER)||\"''\";switch(b){case \"FROM_START\":b=Blockly.Python.getAdjustedInt(a,\"AT1\");\"0\"==b&&(b=\"\");break;case \"FROM_END\":b=Blockly.Python.getAdjustedInt(a,\"AT1\",1,!0);break;case \"FIRST\":b=\"\";break;default:throw Error(\"Unhandled option (text_getSubstring)\");}switch(c){case \"FROM_START\":a=Blockly.Python.getAdjustedInt(a,\"AT2\",1);break;case \"FROM_END\":a=\nBlockly.Python.getAdjustedInt(a,\"AT2\",0,!0);Blockly.isNumber(String(a))?\"0\"==a&&(a=\"\"):(Blockly.Python.definitions_.import_sys=\"import sys\",a+=\" or sys.maxsize\");break;case \"LAST\":a=\"\";break;default:throw Error(\"Unhandled option (text_getSubstring)\");}return[d+\"[\"+b+\" : \"+a+\"]\",Blockly.Python.ORDER_MEMBER]};\nBlockly.Python.text_changeCase=function(a){var b={UPPERCASE:\".upper()\",LOWERCASE:\".lower()\",TITLECASE:\".title()\"}[a.getFieldValue(\"CASE\")];return[(Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\")+b,Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.text_trim=function(a){var b={LEFT:\".lstrip()\",RIGHT:\".rstrip()\",BOTH:\".strip()\"}[a.getFieldValue(\"MODE\")];return[(Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\")+b,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.text_print=function(a){return\"print(\"+(Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_NONE)||\"''\")+\")\\n\"};\nBlockly.Python.text_prompt_ext=function(a){var b=Blockly.Python.provideFunction_(\"text_prompt\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(msg):\",\"  try:\",\"    return raw_input(msg)\",\"  except NameError:\",\"    return input(msg)\"]),c=a.getField(\"TEXT\")?Blockly.Python.quote_(a.getFieldValue(\"TEXT\")):Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_NONE)||\"''\";b=b+\"(\"+c+\")\";\"NUMBER\"==a.getFieldValue(\"TYPE\")&&(b=\"float(\"+b+\")\");return[b,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.text_prompt=Blockly.Python.text_prompt_ext;Blockly.Python.text_count=function(a){var b=Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\";a=Blockly.Python.valueToCode(a,\"SUB\",Blockly.Python.ORDER_NONE)||\"''\";return[b+\".count(\"+a+\")\",Blockly.Python.ORDER_MEMBER]};\nBlockly.Python.text_replace=function(a){var b=Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\",c=Blockly.Python.valueToCode(a,\"FROM\",Blockly.Python.ORDER_NONE)||\"''\";a=Blockly.Python.valueToCode(a,\"TO\",Blockly.Python.ORDER_NONE)||\"''\";return[b+\".replace(\"+c+\", \"+a+\")\",Blockly.Python.ORDER_MEMBER]};Blockly.Python.text_reverse=function(a){return[(Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\")+\"[::-1]\",Blockly.Python.ORDER_MEMBER]};Blockly.Python.variables={};Blockly.Python.variables_get=function(a){return[Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.variables_set=function(a){var b=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"0\";return Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME)+\" = \"+b+\"\\n\"};Blockly.Python.variablesDynamic={};Blockly.Python.variables_get_dynamic=Blockly.Python.variables_get;Blockly.Python.variables_set_dynamic=Blockly.Python.variables_set;\nreturn Blockly.Python;\n}));\n\n\n//# sourceMappingURL=python_compressed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3wJ9\n");

/***/ }),

/***/ "Vwn8":
/*!****************************************!*\
  !*** ./node_modules/blockly/python.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-disable */\n;(function(root, factory) {\n  if (true) { // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ \"t/1s\"), __webpack_require__(/*! ./python_compressed.js */ \"3wJ9\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function(Blockly, BlocklyPython) {\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Python Generator module.\n */\n\n/* eslint-disable */\n'use strict';\n\nBlockly.Python = BlocklyPython;\n\nreturn BlocklyPython;\n})); \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVnduOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ibG9ja2x5L3B5dGhvbi5qcz81NzA5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG47KGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgeyAvLyBBTURcbiAgICBkZWZpbmUoWycuL2NvcmUnLCAnLi9weXRob25fY29tcHJlc3NlZC5qcyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsgLy8gTm9kZS5qc1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCcuL2NvcmUnKSwgcmVxdWlyZSgnLi9weXRob25fY29tcHJlc3NlZC5qcycpKTtcbiAgfSBlbHNlIHsgLy8gQnJvd3NlclxuICAgIHJvb3QuQmxvY2tseVB5dGhvbiA9IGZhY3Rvcnkocm9vdC5CbG9ja2x5LCByb290LkJsb2NrbHlQeXRob24pO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uKEJsb2NrbHksIEJsb2NrbHlQeXRob24pIHtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFB5dGhvbiBHZW5lcmF0b3IgbW9kdWxlLlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4ndXNlIHN0cmljdCc7XG5cbkJsb2NrbHkuUHl0aG9uID0gQmxvY2tseVB5dGhvbjtcblxucmV0dXJuIEJsb2NrbHlQeXRob247XG59KSk7IFxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBLFdBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///Vwn8\n");

/***/ }),

/***/ "wmsw":
/*!****************************************!*\
  !*** ./node_modules/blockly/msg/es.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-disable */\n;(function(root, factory) {\n  if (true) { // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ \"t/1s\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function(Blockly) {\n\n      var Blockly = {};Blockly.Msg={};// This file was automatically generated.  Do not modify.\n\n'use strict';\n\nBlockly.Msg[\"ADD_COMMENT\"] = \"Añadir comentario\";\nBlockly.Msg[\"CANNOT_DELETE_VARIABLE_PROCEDURE\"] = \"No se puede eliminar la variable '%1' porque es parte de la definición de la función '%2'\";\nBlockly.Msg[\"CHANGE_VALUE_TITLE\"] = \"Cambiar el valor:\";\nBlockly.Msg[\"CLEAN_UP\"] = \"Limpiar los bloques\";\nBlockly.Msg[\"COLLAPSED_WARNINGS_WARNING\"] = \"Bloques colapsados contienen advertencias.\";\nBlockly.Msg[\"COLLAPSE_ALL\"] = \"Contraer bloques\";\nBlockly.Msg[\"COLLAPSE_BLOCK\"] = \"Contraer bloque\";\nBlockly.Msg[\"COLOUR_BLEND_COLOUR1\"] = \"color 1\";\nBlockly.Msg[\"COLOUR_BLEND_COLOUR2\"] = \"color 2\";\nBlockly.Msg[\"COLOUR_BLEND_HELPURL\"] = \"https://meyerweb.com/eric/tools/color-blend/#:::rgbp\";  // untranslated\nBlockly.Msg[\"COLOUR_BLEND_RATIO\"] = \"proporción\";\nBlockly.Msg[\"COLOUR_BLEND_TITLE\"] = \"combinar\";\nBlockly.Msg[\"COLOUR_BLEND_TOOLTIP\"] = \"Combina dos colores con una proporción determinada (0,0-1,0).\";\nBlockly.Msg[\"COLOUR_PICKER_HELPURL\"] = \"https://es.wikipedia.org/wiki/Color\";\nBlockly.Msg[\"COLOUR_PICKER_TOOLTIP\"] = \"Elige un color de la paleta.\";\nBlockly.Msg[\"COLOUR_RANDOM_HELPURL\"] = \"http://randomcolour.com\";  // untranslated\nBlockly.Msg[\"COLOUR_RANDOM_TITLE\"] = \"color aleatorio\";\nBlockly.Msg[\"COLOUR_RANDOM_TOOLTIP\"] = \"Elige un color al azar.\";\nBlockly.Msg[\"COLOUR_RGB_BLUE\"] = \"azul\";\nBlockly.Msg[\"COLOUR_RGB_GREEN\"] = \"verde\";\nBlockly.Msg[\"COLOUR_RGB_HELPURL\"] = \"https://www.december.com/html/spec/colorpercompact.html\";  // untranslated\nBlockly.Msg[\"COLOUR_RGB_RED\"] = \"rojo\";\nBlockly.Msg[\"COLOUR_RGB_TITLE\"] = \"colorear con\";\nBlockly.Msg[\"COLOUR_RGB_TOOLTIP\"] = \"Crea un color con cantidades específicas de rojo, verde y azul. Todos los valores deben encontrarse entre 0 y 100.\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_HELPURL\"] = \"https://github.com/google/blockly/wiki/Loops#loop-termination-blocks\";  // untranslated\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK\"] = \"romper el bucle\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE\"] = \"continuar con la siguiente iteración del bucle\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK\"] = \"Romper el bucle que lo contiene.\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE\"] = \"Saltar el resto de este bucle, y continuar con la siguiente iteración.\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_WARNING\"] = \"Atención: este bloque puede usarse solamente dentro de un bucle.\";\nBlockly.Msg[\"CONTROLS_FOREACH_HELPURL\"] = \"https://es.wikipedia.org/wiki/Foreach\";\nBlockly.Msg[\"CONTROLS_FOREACH_TITLE\"] = \"para cada elemento %1 en la lista %2\";\nBlockly.Msg[\"CONTROLS_FOREACH_TOOLTIP\"] = \"Para cada elemento en una lista, establecer la variable '%1' al elemento y luego hacer algunas declaraciones.\";\nBlockly.Msg[\"CONTROLS_FOR_HELPURL\"] = \"https://github.com/google/blockly/wiki/Loops#count-with\";  // untranslated\nBlockly.Msg[\"CONTROLS_FOR_TITLE\"] = \"contar con %1 desde %2 hasta %3 de a %4\";\nBlockly.Msg[\"CONTROLS_FOR_TOOLTIP\"] = \"Hacer que la variable \\\"%1\\\" tome los valores desde el número de inicio hasta el número final, contando con el intervalo especificado, y hacer los bloques especificados.\";\nBlockly.Msg[\"CONTROLS_IF_ELSEIF_TOOLTIP\"] = \"Agregar una condición a este bloque.\";\nBlockly.Msg[\"CONTROLS_IF_ELSE_TOOLTIP\"] = \"Agregar una condición general final a este bloque.\";\nBlockly.Msg[\"CONTROLS_IF_HELPURL\"] = \"https://github.com/google/blockly/wiki/IfElse\";  // untranslated\nBlockly.Msg[\"CONTROLS_IF_IF_TOOLTIP\"] = \"Agregar, eliminar o reordenar las secciones para reconfigurar este bloque.\";\nBlockly.Msg[\"CONTROLS_IF_MSG_ELSE\"] = \"sino\";\nBlockly.Msg[\"CONTROLS_IF_MSG_ELSEIF\"] = \"sino si\";\nBlockly.Msg[\"CONTROLS_IF_MSG_IF\"] = \"si\";\nBlockly.Msg[\"CONTROLS_IF_TOOLTIP_1\"] = \"Si un valor es verdadero, entonces hacer algunas declaraciones.\";\nBlockly.Msg[\"CONTROLS_IF_TOOLTIP_2\"] = \"Si un valor es verdadero, entonces hacer el primer bloque de declaraciones.  De lo contrario, hacer el segundo bloque de declaraciones.\";\nBlockly.Msg[\"CONTROLS_IF_TOOLTIP_3\"] = \"Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones.\";\nBlockly.Msg[\"CONTROLS_IF_TOOLTIP_4\"] = \"Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones. Si ninguno de los valores son verdaderos, hacer el último bloque de declaraciones.\";\nBlockly.Msg[\"CONTROLS_REPEAT_HELPURL\"] = \"https://en.wikipedia.org/wiki/For_loop\";\nBlockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"] = \"hacer\";\nBlockly.Msg[\"CONTROLS_REPEAT_TITLE\"] = \"repetir %1 veces\";\nBlockly.Msg[\"CONTROLS_REPEAT_TOOLTIP\"] = \"Hacer algunas declaraciones varias veces.\";\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_HELPURL\"] = \"https://github.com/google/blockly/wiki/Loops#repeat\";  // untranslated\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_OPERATOR_UNTIL\"] = \"repetir hasta\";\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_OPERATOR_WHILE\"] = \"repetir mientras\";\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL\"] = \"Mientras un valor sea falso, entonces hacer algunas declaraciones.\";\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_TOOLTIP_WHILE\"] = \"Mientras un valor sea verdadero, entonces hacer algunas declaraciones.\";\nBlockly.Msg[\"DELETE_ALL_BLOCKS\"] = \"¿Eliminar todos los %1 bloques?\";\nBlockly.Msg[\"DELETE_BLOCK\"] = \"Eliminar bloque\";\nBlockly.Msg[\"DELETE_VARIABLE\"] = \"Borrar la variable \\\"%1\\\"\";\nBlockly.Msg[\"DELETE_VARIABLE_CONFIRMATION\"] = \"¿Borrar %1 usos de la variable '%2'?\";\nBlockly.Msg[\"DELETE_X_BLOCKS\"] = \"Eliminar %1 bloques\";\nBlockly.Msg[\"DISABLE_BLOCK\"] = \"Desactivar bloque\";\nBlockly.Msg[\"DUPLICATE_BLOCK\"] = \"Duplicar\";\nBlockly.Msg[\"DUPLICATE_COMMENT\"] = \"Duplicar comentario\";\nBlockly.Msg[\"ENABLE_BLOCK\"] = \"Activar bloque\";\nBlockly.Msg[\"EXPAND_ALL\"] = \"Expandir bloques\";\nBlockly.Msg[\"EXPAND_BLOCK\"] = \"Expandir bloque\";\nBlockly.Msg[\"EXTERNAL_INPUTS\"] = \"Entradas externas\";\nBlockly.Msg[\"HELP\"] = \"Ayuda\";\nBlockly.Msg[\"INLINE_INPUTS\"] = \"Entradas en línea\";\nBlockly.Msg[\"IOS_CANCEL\"] = \"Cancelar\";\nBlockly.Msg[\"IOS_ERROR\"] = \"Error\";\nBlockly.Msg[\"IOS_OK\"] = \"Aceptar\";\nBlockly.Msg[\"IOS_PROCEDURES_ADD_INPUT\"] = \"+ Añadir entrada\";\nBlockly.Msg[\"IOS_PROCEDURES_ALLOW_STATEMENTS\"] = \"Permitir declaraciones\";\nBlockly.Msg[\"IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR\"] = \"Esta función tiene entradas duplicadas.\";\nBlockly.Msg[\"IOS_PROCEDURES_INPUTS\"] = \"ENTRADAS\";\nBlockly.Msg[\"IOS_VARIABLES_ADD_BUTTON\"] = \"Añadir\";\nBlockly.Msg[\"IOS_VARIABLES_ADD_VARIABLE\"] = \"+ Añadir variable\";\nBlockly.Msg[\"IOS_VARIABLES_DELETE_BUTTON\"] = \"Borrar\";\nBlockly.Msg[\"IOS_VARIABLES_EMPTY_NAME_ERROR\"] = \"No puedes usar un nombre de variable vacío.\";\nBlockly.Msg[\"IOS_VARIABLES_RENAME_BUTTON\"] = \"Renombrar\";\nBlockly.Msg[\"IOS_VARIABLES_VARIABLE_NAME\"] = \"Nombre de la variable\";\nBlockly.Msg[\"LISTS_CREATE_EMPTY_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#create-empty-list\";  // untranslated\nBlockly.Msg[\"LISTS_CREATE_EMPTY_TITLE\"] = \"crear lista vacía\";\nBlockly.Msg[\"LISTS_CREATE_EMPTY_TOOLTIP\"] = \"Devuelve una lista, de longitud 0, sin ningún dato\";\nBlockly.Msg[\"LISTS_CREATE_WITH_CONTAINER_TITLE_ADD\"] = \"lista\";\nBlockly.Msg[\"LISTS_CREATE_WITH_CONTAINER_TOOLTIP\"] = \"Agregar, eliminar o reorganizar las secciones para reconfigurar este bloque de lista.\";\nBlockly.Msg[\"LISTS_CREATE_WITH_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#create-list-with\";\nBlockly.Msg[\"LISTS_CREATE_WITH_INPUT_WITH\"] = \"crear lista con\";\nBlockly.Msg[\"LISTS_CREATE_WITH_ITEM_TOOLTIP\"] = \"Agregar un elemento a la lista.\";\nBlockly.Msg[\"LISTS_CREATE_WITH_TOOLTIP\"] = \"Crear una lista con cualquier número de elementos.\";\nBlockly.Msg[\"LISTS_GET_INDEX_FIRST\"] = \"primero\";\nBlockly.Msg[\"LISTS_GET_INDEX_FROM_END\"] = \"# del final\";\nBlockly.Msg[\"LISTS_GET_INDEX_FROM_START\"] = \"#\";  // untranslated\nBlockly.Msg[\"LISTS_GET_INDEX_GET\"] = \"obtener\";\nBlockly.Msg[\"LISTS_GET_INDEX_GET_REMOVE\"] = \"obtener y eliminar\";\nBlockly.Msg[\"LISTS_GET_INDEX_LAST\"] = \"último\";\nBlockly.Msg[\"LISTS_GET_INDEX_RANDOM\"] = \"aleatorio\";\nBlockly.Msg[\"LISTS_GET_INDEX_REMOVE\"] = \"eliminar\";\nBlockly.Msg[\"LISTS_GET_INDEX_TAIL\"] = \"\";  // untranslated\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_FIRST\"] = \"Devuelve el primer elemento de una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_FROM\"] = \"Devuelve el elemento en la posición especificada en una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_LAST\"] = \"Devuelve el último elemento de una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_RANDOM\"] = \"Devuelve un elemento aleatorio en una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST\"] = \"Elimina y devuelve el primer elemento de una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM\"] = \"Elimina y devuelve el elemento en la posición especificada en una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST\"] = \"Elimina y devuelve el último elemento de una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM\"] = \"Elimina y devuelve un elemento aleatorio en una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST\"] = \"Elimina el primer elemento de una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM\"] = \"Elimina el elemento en la posición especificada en una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST\"] = \"Elimina el último elemento de una lista.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM\"] = \"Elimina un elemento aleatorio en una lista.\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_END_FROM_END\"] = \"hasta # del final\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_END_FROM_START\"] = \"hasta #\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_END_LAST\"] = \"hasta el último\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#getting-a-sublist\";  // untranslated\nBlockly.Msg[\"LISTS_GET_SUBLIST_START_FIRST\"] = \"obtener sublista desde el primero\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_START_FROM_END\"] = \"obtener sublista desde # del final\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_START_FROM_START\"] = \"obtener sublista desde #\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_TAIL\"] = \"\";  // untranslated\nBlockly.Msg[\"LISTS_GET_SUBLIST_TOOLTIP\"] = \"Crea una copia de la parte especificada de una lista.\";\nBlockly.Msg[\"LISTS_INDEX_FROM_END_TOOLTIP\"] = \"%1 es el último elemento.\";\nBlockly.Msg[\"LISTS_INDEX_FROM_START_TOOLTIP\"] = \"%1 es el primer elemento.\";\nBlockly.Msg[\"LISTS_INDEX_OF_FIRST\"] = \"encontrar la primera aparición del elemento\";\nBlockly.Msg[\"LISTS_INDEX_OF_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list\";  // untranslated\nBlockly.Msg[\"LISTS_INDEX_OF_LAST\"] = \"encontrar la última aparición del elemento\";\nBlockly.Msg[\"LISTS_INDEX_OF_TOOLTIP\"] = \"Devuelve el índice de la primera/última aparición del elemento en la lista. Devuelve %1 si el elemento no se encuentra.\";\nBlockly.Msg[\"LISTS_INLIST\"] = \"en la lista\";\nBlockly.Msg[\"LISTS_ISEMPTY_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#is-empty\";  // untranslated\nBlockly.Msg[\"LISTS_ISEMPTY_TITLE\"] = \"%1 está vacía\";\nBlockly.Msg[\"LISTS_ISEMPTY_TOOLTIP\"] = \"Devuelve verdadero si la lista está vacía.\";\nBlockly.Msg[\"LISTS_LENGTH_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#length-of\";  // untranslated\nBlockly.Msg[\"LISTS_LENGTH_TITLE\"] = \"longitud de %1\";\nBlockly.Msg[\"LISTS_LENGTH_TOOLTIP\"] = \"Devuelve la longitud de una lista.\";\nBlockly.Msg[\"LISTS_REPEAT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#create-list-with\";  // untranslated\nBlockly.Msg[\"LISTS_REPEAT_TITLE\"] = \"crear lista con el elemento %1 repetido %2 veces\";\nBlockly.Msg[\"LISTS_REPEAT_TOOLTIP\"] = \"Crea una lista que consta de un valor dado repetido el número de veces especificado.\";\nBlockly.Msg[\"LISTS_REVERSE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#reversing-a-list\";\nBlockly.Msg[\"LISTS_REVERSE_MESSAGE0\"] = \"invertir %1\";\nBlockly.Msg[\"LISTS_REVERSE_TOOLTIP\"] = \"Invertir una copia de una lista.\";\nBlockly.Msg[\"LISTS_SET_INDEX_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#in-list--set\";  // untranslated\nBlockly.Msg[\"LISTS_SET_INDEX_INPUT_TO\"] = \"como\";\nBlockly.Msg[\"LISTS_SET_INDEX_INSERT\"] = \"insertar en\";\nBlockly.Msg[\"LISTS_SET_INDEX_SET\"] = \"establecer\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST\"] = \"Inserta el elemento al inicio de una lista.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_INSERT_FROM\"] = \"Inserta el elemento en la posición especificada en una lista.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_INSERT_LAST\"] = \"Añade el elemento al final de una lista.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM\"] = \"Inserta el elemento aleatoriamente en una lista.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_SET_FIRST\"] = \"Establece el primer elemento de una lista.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_SET_FROM\"] = \"Establece el elemento en la posición especificada en una lista.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_SET_LAST\"] = \"Establece el último elemento de una lista.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_SET_RANDOM\"] = \"Establece un elemento aleatorio en una lista.\";\nBlockly.Msg[\"LISTS_SORT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#sorting-a-list\";\nBlockly.Msg[\"LISTS_SORT_ORDER_ASCENDING\"] = \"ascendente\";\nBlockly.Msg[\"LISTS_SORT_ORDER_DESCENDING\"] = \"descendente\";\nBlockly.Msg[\"LISTS_SORT_TITLE\"] = \"orden %1 %2 %3\";\nBlockly.Msg[\"LISTS_SORT_TOOLTIP\"] = \"Ordenar una copia de una lista.\";\nBlockly.Msg[\"LISTS_SORT_TYPE_IGNORECASE\"] = \"alfabético, ignorar mayúscula/minúscula\";\nBlockly.Msg[\"LISTS_SORT_TYPE_NUMERIC\"] = \"numérico\";\nBlockly.Msg[\"LISTS_SORT_TYPE_TEXT\"] = \"alfabético\";\nBlockly.Msg[\"LISTS_SPLIT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists\";\nBlockly.Msg[\"LISTS_SPLIT_LIST_FROM_TEXT\"] = \"hacer lista a partir de texto\";\nBlockly.Msg[\"LISTS_SPLIT_TEXT_FROM_LIST\"] = \"hacer texto a partir de lista\";\nBlockly.Msg[\"LISTS_SPLIT_TOOLTIP_JOIN\"] = \"Unir una lista de textos en un solo texto, separado por un delimitador.\";\nBlockly.Msg[\"LISTS_SPLIT_TOOLTIP_SPLIT\"] = \"Dividir el texto en una lista de textos, separando en cada delimitador.\";\nBlockly.Msg[\"LISTS_SPLIT_WITH_DELIMITER\"] = \"con delimitador\";\nBlockly.Msg[\"LOGIC_BOOLEAN_FALSE\"] = \"falso\";\nBlockly.Msg[\"LOGIC_BOOLEAN_HELPURL\"] = \"https://github.com/google/blockly/wiki/Logic#values\";  // untranslated\nBlockly.Msg[\"LOGIC_BOOLEAN_TOOLTIP\"] = \"Devuelve verdadero o falso.\";\nBlockly.Msg[\"LOGIC_BOOLEAN_TRUE\"] = \"verdadero\";\nBlockly.Msg[\"LOGIC_COMPARE_HELPURL\"] = \"https://es.wikipedia.org/wiki/Desigualdad_matemática\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_EQ\"] = \"Devuelve verdadero si ambas entradas son iguales.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_GT\"] = \"Devuelve verdadero si la primera entrada es mayor que la segunda entrada.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_GTE\"] = \"Devuelve verdadero si la primera entrada es mayor o igual a la segunda entrada.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_LT\"] = \"Devuelve verdadero si la primera entrada es menor que la segunda entrada.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_LTE\"] = \"Devuelve verdadero si la primera entrada es menor que o igual a la segunda entrada.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_NEQ\"] = \"Devuelve verdadero si ambas entradas son distintas.\";\nBlockly.Msg[\"LOGIC_NEGATE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Logic#not\";  // untranslated\nBlockly.Msg[\"LOGIC_NEGATE_TITLE\"] = \"no %1\";\nBlockly.Msg[\"LOGIC_NEGATE_TOOLTIP\"] = \"Devuelve verdadero si la entrada es falsa. Devuelve falso si la entrada es verdadera.\";\nBlockly.Msg[\"LOGIC_NULL\"] = \"nulo\";\nBlockly.Msg[\"LOGIC_NULL_HELPURL\"] = \"https://en.wikipedia.org/wiki/Nullable_type\";  // untranslated\nBlockly.Msg[\"LOGIC_NULL_TOOLTIP\"] = \"Devuelve nulo.\";\nBlockly.Msg[\"LOGIC_OPERATION_AND\"] = \"y\";\nBlockly.Msg[\"LOGIC_OPERATION_HELPURL\"] = \"https://github.com/google/blockly/wiki/Logic#logical-operations\";  // untranslated\nBlockly.Msg[\"LOGIC_OPERATION_OR\"] = \"o\";\nBlockly.Msg[\"LOGIC_OPERATION_TOOLTIP_AND\"] = \"Devuelve verdadero si ambas entradas son verdaderas.\";\nBlockly.Msg[\"LOGIC_OPERATION_TOOLTIP_OR\"] = \"Devuelve verdadero si al menos una de las entradas es verdadera.\";\nBlockly.Msg[\"LOGIC_TERNARY_CONDITION\"] = \"prueba\";\nBlockly.Msg[\"LOGIC_TERNARY_HELPURL\"] = \"https://en.wikipedia.org/wiki/%3F:\";  // untranslated\nBlockly.Msg[\"LOGIC_TERNARY_IF_FALSE\"] = \"si es falso\";\nBlockly.Msg[\"LOGIC_TERNARY_IF_TRUE\"] = \"si es verdadero\";\nBlockly.Msg[\"LOGIC_TERNARY_TOOLTIP\"] = \"Comprueba la condición en \\\"prueba\\\". Si la condición es verdadera, devuelve el valor \\\"si es verdadero\\\"; de lo contrario, devuelve el valor \\\"si es falso\\\".\";\nBlockly.Msg[\"MATH_ADDITION_SYMBOL\"] = \"+\";  // untranslated\nBlockly.Msg[\"MATH_ARITHMETIC_HELPURL\"] = \"https://es.wikipedia.org/wiki/Aritmética\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_ADD\"] = \"Devuelve la suma de ambos números.\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_DIVIDE\"] = \"Devuelve el cociente de ambos números.\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_MINUS\"] = \"Devuelve la diferencia de ambos números.\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_MULTIPLY\"] = \"Devuelve el producto de ambos números.\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_POWER\"] = \"Devuelve el primer número elevado a la potencia del segundo.\";\nBlockly.Msg[\"MATH_ATAN2_HELPURL\"] = \"https://es.wikipedia.org/wiki/Arcotangente_de_dos_par%C3%A1metros\";\nBlockly.Msg[\"MATH_ATAN2_TITLE\"] = \"Arcotangente de X:%1 Y:%2\";\nBlockly.Msg[\"MATH_ATAN2_TOOLTIP\"] = \"Regresar el arcotangente del punto (X,Y) en grados de -180 a 180.\";\nBlockly.Msg[\"MATH_CHANGE_HELPURL\"] = \"https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter\";\nBlockly.Msg[\"MATH_CHANGE_TITLE\"] = \"añadir %2 a %1\";\nBlockly.Msg[\"MATH_CHANGE_TOOLTIP\"] = \"Añadir un número a la variable «%1».\";\nBlockly.Msg[\"MATH_CONSTANT_HELPURL\"] = \"https://es.wikipedia.org/wiki/Anexo:Constantes_matemáticas\";\nBlockly.Msg[\"MATH_CONSTANT_TOOLTIP\"] = \"Devuelve una de las constantes comunes: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…) o ∞ (infinito).\";\nBlockly.Msg[\"MATH_CONSTRAIN_HELPURL\"] = \"https://en.wikipedia.org/wiki/Clamping_(graphics)\";  // untranslated\nBlockly.Msg[\"MATH_CONSTRAIN_TITLE\"] = \"limitar %1 entre %2 y %3\";\nBlockly.Msg[\"MATH_CONSTRAIN_TOOLTIP\"] = \"Limitar un número entre los límites especificados (inclusive).\";\nBlockly.Msg[\"MATH_DIVISION_SYMBOL\"] = \"÷\";  // untranslated\nBlockly.Msg[\"MATH_IS_DIVISIBLE_BY\"] = \"es divisible por\";\nBlockly.Msg[\"MATH_IS_EVEN\"] = \"es par\";\nBlockly.Msg[\"MATH_IS_NEGATIVE\"] = \"es negativo\";\nBlockly.Msg[\"MATH_IS_ODD\"] = \"es impar\";\nBlockly.Msg[\"MATH_IS_POSITIVE\"] = \"es positivo\";\nBlockly.Msg[\"MATH_IS_PRIME\"] = \"es primo\";\nBlockly.Msg[\"MATH_IS_TOOLTIP\"] = \"Comprueba si un número es par, impar, primo, entero, positivo, negativo, o si es divisible por un número determinado. Devuelve verdadero o falso.\";\nBlockly.Msg[\"MATH_IS_WHOLE\"] = \"es entero\";\nBlockly.Msg[\"MATH_MODULO_HELPURL\"] = \"https://en.wikipedia.org/wiki/Modulo_operation\";\nBlockly.Msg[\"MATH_MODULO_TITLE\"] = \"resto de %1 ÷ %2\";\nBlockly.Msg[\"MATH_MODULO_TOOLTIP\"] = \"Devuelve el resto al dividir los dos números.\";\nBlockly.Msg[\"MATH_MULTIPLICATION_SYMBOL\"] = \"×\";  // untranslated\nBlockly.Msg[\"MATH_NUMBER_HELPURL\"] = \"https://es.wikipedia.org/wiki/Número\";\nBlockly.Msg[\"MATH_NUMBER_TOOLTIP\"] = \"Un número.\";\nBlockly.Msg[\"MATH_ONLIST_HELPURL\"] = \"\";  // untranslated\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_AVERAGE\"] = \"promedio de la lista\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_MAX\"] = \"máximo de la lista\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_MEDIAN\"] = \"mediana de la lista\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_MIN\"] = \"mínimo de la lista\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_MODE\"] = \"modas de la lista\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_RANDOM\"] = \"elemento aleatorio de la lista\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_STD_DEV\"] = \"desviación estándar de la lista\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_SUM\"] = \"suma de la lista\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_AVERAGE\"] = \"Devuelve el promedio (media aritmética) de los valores numéricos en la lista.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_MAX\"] = \"Devuelve el número más grande en la lista.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_MEDIAN\"] = \"Devuelve la mediana en la lista.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_MIN\"] = \"Devuelve el número más pequeño en la lista.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_MODE\"] = \"Devuelve una lista de los elementos más comunes en la lista.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_RANDOM\"] = \"Devuelve un elemento aleatorio de la lista.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_STD_DEV\"] = \"Devuelve la desviación estándar de la lista.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_SUM\"] = \"Devuelve la suma de todos los números en la lista.\";\nBlockly.Msg[\"MATH_POWER_SYMBOL\"] = \"^\";  // untranslated\nBlockly.Msg[\"MATH_RANDOM_FLOAT_HELPURL\"] = \"https://es.wikipedia.org/wiki/Generador_de_números_aleatorios\";\nBlockly.Msg[\"MATH_RANDOM_FLOAT_TITLE_RANDOM\"] = \"fracción aleatoria\";\nBlockly.Msg[\"MATH_RANDOM_FLOAT_TOOLTIP\"] = \"Devuelve una fracción aleatoria entre 0,0 (ambos inclusive) y 1.0 (exclusivo).\";\nBlockly.Msg[\"MATH_RANDOM_INT_HELPURL\"] = \"https://es.wikipedia.org/wiki/Generador_de_números_aleatorios\";\nBlockly.Msg[\"MATH_RANDOM_INT_TITLE\"] = \"entero aleatorio de %1 a %2\";\nBlockly.Msg[\"MATH_RANDOM_INT_TOOLTIP\"] = \"Devuelve un entero aleatorio entre los dos límites especificados, inclusive.\";\nBlockly.Msg[\"MATH_ROUND_HELPURL\"] = \"https://es.wikipedia.org/wiki/Redondeo\";\nBlockly.Msg[\"MATH_ROUND_OPERATOR_ROUND\"] = \"redondear\";\nBlockly.Msg[\"MATH_ROUND_OPERATOR_ROUNDDOWN\"] = \"redondear a la baja\";\nBlockly.Msg[\"MATH_ROUND_OPERATOR_ROUNDUP\"] = \"redondear al alza\";\nBlockly.Msg[\"MATH_ROUND_TOOLTIP\"] = \"Redondear un número al alza o a la baja.\";\nBlockly.Msg[\"MATH_SINGLE_HELPURL\"] = \"https://es.wikipedia.org/wiki/Ra%C3%ADz_cuadrada\";\nBlockly.Msg[\"MATH_SINGLE_OP_ABSOLUTE\"] = \"absoluto\";\nBlockly.Msg[\"MATH_SINGLE_OP_ROOT\"] = \"raíz cuadrada\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_ABS\"] = \"Devuelve el valor absoluto de un número.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_EXP\"] = \"Devuelve e a la potencia de un número.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_LN\"] = \"Devuelve el logaritmo natural de un número.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_LOG10\"] = \"Devuelve el logaritmo base 10 de un número.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_NEG\"] = \"Devuelve la negación de un número.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_POW10\"] = \"Devuelve 10 a la potencia de un número.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_ROOT\"] = \"Devuelve la raíz cuadrada de un número.\";\nBlockly.Msg[\"MATH_SUBTRACTION_SYMBOL\"] = \"-\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_ACOS\"] = \"acos\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_ASIN\"] = \"asin\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_ATAN\"] = \"atan\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_COS\"] = \"cos\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_HELPURL\"] = \"https://es.wikipedia.org/wiki/Función_trigonométrica\";\nBlockly.Msg[\"MATH_TRIG_SIN\"] = \"sin\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_TAN\"] = \"tan\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_ACOS\"] = \"Devuelve el arcocoseno de un número.\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_ASIN\"] = \"Devuelve el arcoseno de un número.\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_ATAN\"] = \"Devuelve el arcotangente de un número.\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_COS\"] = \"Devuelve el coseno de un grado (no radián).\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_SIN\"] = \"Devuelve el seno de un grado (no radián).\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_TAN\"] = \"Devuelve la tangente de un grado (no radián).\";\nBlockly.Msg[\"NEW_COLOUR_VARIABLE\"] = \"Crear una variable de color...\";\nBlockly.Msg[\"NEW_NUMBER_VARIABLE\"] = \"Crear una variable de número...\";\nBlockly.Msg[\"NEW_STRING_VARIABLE\"] = \"Crear una cadena variable...\";\nBlockly.Msg[\"NEW_VARIABLE\"] = \"Crear variable…\";\nBlockly.Msg[\"NEW_VARIABLE_TITLE\"] = \"Nombre de variable nueva:\";\nBlockly.Msg[\"NEW_VARIABLE_TYPE_TITLE\"] = \"Nuevo tipo de variable:\";\nBlockly.Msg[\"ORDINAL_NUMBER_SUFFIX\"] = \"\";  // untranslated\nBlockly.Msg[\"PROCEDURES_ALLOW_STATEMENTS\"] = \"permitir declaraciones\";\nBlockly.Msg[\"PROCEDURES_BEFORE_PARAMS\"] = \"con:\";\nBlockly.Msg[\"PROCEDURES_CALLNORETURN_HELPURL\"] = \"https://es.wikipedia.org/wiki/Subrutina\";\nBlockly.Msg[\"PROCEDURES_CALLNORETURN_TOOLTIP\"] = \"Ejecuta la función definida por el usuario '%1'.\";\nBlockly.Msg[\"PROCEDURES_CALLRETURN_HELPURL\"] = \"https://es.wikipedia.org/wiki/Subrutina\";\nBlockly.Msg[\"PROCEDURES_CALLRETURN_TOOLTIP\"] = \"Ejecuta la función definida por el usuario '%1' y usa su salida.\";\nBlockly.Msg[\"PROCEDURES_CALL_BEFORE_PARAMS\"] = \"con:\";\nBlockly.Msg[\"PROCEDURES_CREATE_DO\"] = \"Crear '%1'\";\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_COMMENT\"] = \"Describe esta función...\";\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_DO\"] = \"\";  // untranslated\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_HELPURL\"] = \"https://en.wikipedia.org/wiki/Subroutine\";  // untranslated\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_PROCEDURE\"] = \"hacer algo\";\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_TITLE\"] = \"para\";\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_TOOLTIP\"] = \"Crea una función sin salida.\";\nBlockly.Msg[\"PROCEDURES_DEFRETURN_HELPURL\"] = \"https://en.wikipedia.org/wiki/Subroutine\";  // untranslated\nBlockly.Msg[\"PROCEDURES_DEFRETURN_RETURN\"] = \"devuelve\";\nBlockly.Msg[\"PROCEDURES_DEFRETURN_TOOLTIP\"] = \"Crea una función con una salida.\";\nBlockly.Msg[\"PROCEDURES_DEF_DUPLICATE_WARNING\"] = \"Advertencia: Esta función tiene parámetros duplicados.\";\nBlockly.Msg[\"PROCEDURES_HIGHLIGHT_DEF\"] = \"Destacar definición de la función\";\nBlockly.Msg[\"PROCEDURES_IFRETURN_HELPURL\"] = \"http://c2.com/cgi/wiki?GuardClause\";  // untranslated\nBlockly.Msg[\"PROCEDURES_IFRETURN_TOOLTIP\"] = \"Si un valor es verdadero, entonces devuelve un segundo valor.\";\nBlockly.Msg[\"PROCEDURES_IFRETURN_WARNING\"] = \"Advertencia: Este bloque solo puede ser utilizado dentro de la definición de una función.\";\nBlockly.Msg[\"PROCEDURES_MUTATORARG_TITLE\"] = \"nombre de entrada:\";\nBlockly.Msg[\"PROCEDURES_MUTATORARG_TOOLTIP\"] = \"Añadir una entrada a la función.\";\nBlockly.Msg[\"PROCEDURES_MUTATORCONTAINER_TITLE\"] = \"entradas\";\nBlockly.Msg[\"PROCEDURES_MUTATORCONTAINER_TOOLTIP\"] = \"Añadir, eliminar o reordenar entradas para esta función.\";\nBlockly.Msg[\"REDO\"] = \"Rehacer\";\nBlockly.Msg[\"REMOVE_COMMENT\"] = \"Eliminar comentario\";\nBlockly.Msg[\"RENAME_VARIABLE\"] = \"Cambiar nombre de variable…\";\nBlockly.Msg[\"RENAME_VARIABLE_TITLE\"] = \"Renombrar todas las variables «%1» a:\";\nBlockly.Msg[\"TEXT_APPEND_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#text-modification\";  // untranslated\nBlockly.Msg[\"TEXT_APPEND_TITLE\"] = \"a %1 añade el texto %2\";\nBlockly.Msg[\"TEXT_APPEND_TOOLTIP\"] = \"Añadir texto a la variable '%1'.\";\nBlockly.Msg[\"TEXT_CHANGECASE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#adjusting-text-case\";  // untranslated\nBlockly.Msg[\"TEXT_CHANGECASE_OPERATOR_LOWERCASE\"] = \"a minúsculas\";\nBlockly.Msg[\"TEXT_CHANGECASE_OPERATOR_TITLECASE\"] = \"a Mayúsculas Cada Palabra\";\nBlockly.Msg[\"TEXT_CHANGECASE_OPERATOR_UPPERCASE\"] = \"a MAYÚSCULAS\";\nBlockly.Msg[\"TEXT_CHANGECASE_TOOLTIP\"] = \"Devuelve una copia del texto en un tamaño diferente.\";\nBlockly.Msg[\"TEXT_CHARAT_FIRST\"] = \"obtener la primera letra\";\nBlockly.Msg[\"TEXT_CHARAT_FROM_END\"] = \"obtener la letra # del final\";\nBlockly.Msg[\"TEXT_CHARAT_FROM_START\"] = \"obtener la letra #\";\nBlockly.Msg[\"TEXT_CHARAT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#extracting-text\";  // untranslated\nBlockly.Msg[\"TEXT_CHARAT_LAST\"] = \"obtener la última letra\";\nBlockly.Msg[\"TEXT_CHARAT_RANDOM\"] = \"obtener letra aleatoria\";\nBlockly.Msg[\"TEXT_CHARAT_TAIL\"] = \"\";  // untranslated\nBlockly.Msg[\"TEXT_CHARAT_TITLE\"] = \"en el texto %1 %2\";\nBlockly.Msg[\"TEXT_CHARAT_TOOLTIP\"] = \"Devuelve la letra en la posición especificada.\";\nBlockly.Msg[\"TEXT_COUNT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#counting-substrings\";\nBlockly.Msg[\"TEXT_COUNT_MESSAGE0\"] = \"contar %1 en %2\";\nBlockly.Msg[\"TEXT_COUNT_TOOLTIP\"] = \"Cuantas veces aparece un texto dentro de otro texto.\";\nBlockly.Msg[\"TEXT_CREATE_JOIN_ITEM_TOOLTIP\"] = \"Agregar un elemento al texto.\";\nBlockly.Msg[\"TEXT_CREATE_JOIN_TITLE_JOIN\"] = \"unir\";\nBlockly.Msg[\"TEXT_CREATE_JOIN_TOOLTIP\"] = \"Agregar, eliminar o reordenar las secciones para reconfigurar este bloque de texto.\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_END_FROM_END\"] = \"hasta la letra # del final\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_END_FROM_START\"] = \"hasta la letra #\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_END_LAST\"] = \"hasta la última letra\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text\";  // untranslated\nBlockly.Msg[\"TEXT_GET_SUBSTRING_INPUT_IN_TEXT\"] = \"en el texto\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_START_FIRST\"] = \"obtener subcadena desde la primera letra\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_START_FROM_END\"] = \"obtener subcadena desde la letra # del final\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_START_FROM_START\"] = \"obtener subcadena desde la letra #\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_TAIL\"] = \"\";  // untranslated\nBlockly.Msg[\"TEXT_GET_SUBSTRING_TOOLTIP\"] = \"Devuelve una porción determinada del texto.\";\nBlockly.Msg[\"TEXT_INDEXOF_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#finding-text\";  // untranslated\nBlockly.Msg[\"TEXT_INDEXOF_OPERATOR_FIRST\"] = \"encontrar la primera aparición del texto\";\nBlockly.Msg[\"TEXT_INDEXOF_OPERATOR_LAST\"] = \"encontrar la última aparición del texto\";\nBlockly.Msg[\"TEXT_INDEXOF_TITLE\"] = \"en el texto %1 %2 %3\";\nBlockly.Msg[\"TEXT_INDEXOF_TOOLTIP\"] = \"Devuelve el índice de la primera/última aparición del primer texto en el segundo texto. Devuelve %1 si el texto no se encuentra.\";\nBlockly.Msg[\"TEXT_ISEMPTY_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#checking-for-empty-text\";  // untranslated\nBlockly.Msg[\"TEXT_ISEMPTY_TITLE\"] = \"%1 está vacío\";\nBlockly.Msg[\"TEXT_ISEMPTY_TOOLTIP\"] = \"Devuelve verdadero si el texto proporcionado está vacío.\";\nBlockly.Msg[\"TEXT_JOIN_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#text-creation\";  // untranslated\nBlockly.Msg[\"TEXT_JOIN_TITLE_CREATEWITH\"] = \"crear texto con\";\nBlockly.Msg[\"TEXT_JOIN_TOOLTIP\"] = \"Crear un fragmento de texto al unir cualquier número de elementos.\";\nBlockly.Msg[\"TEXT_LENGTH_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#text-modification\";  // untranslated\nBlockly.Msg[\"TEXT_LENGTH_TITLE\"] = \"longitud de %1\";\nBlockly.Msg[\"TEXT_LENGTH_TOOLTIP\"] = \"Devuelve el número de letras (espacios incluidos) del texto proporcionado.\";\nBlockly.Msg[\"TEXT_PRINT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#printing-text\";  // untranslated\nBlockly.Msg[\"TEXT_PRINT_TITLE\"] = \"imprimir %1\";\nBlockly.Msg[\"TEXT_PRINT_TOOLTIP\"] = \"Imprimir el texto, número u otro valor especificado.\";\nBlockly.Msg[\"TEXT_PROMPT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#getting-input-from-the-user\";  // untranslated\nBlockly.Msg[\"TEXT_PROMPT_TOOLTIP_NUMBER\"] = \"Solicitar al usuario un número.\";\nBlockly.Msg[\"TEXT_PROMPT_TOOLTIP_TEXT\"] = \"Solicitar al usuario un texto.\";\nBlockly.Msg[\"TEXT_PROMPT_TYPE_NUMBER\"] = \"solicitar número con el mensaje\";\nBlockly.Msg[\"TEXT_PROMPT_TYPE_TEXT\"] = \"solicitar texto con el mensaje\";\nBlockly.Msg[\"TEXT_REPLACE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#replacing-substrings\";\nBlockly.Msg[\"TEXT_REPLACE_MESSAGE0\"] = \"reemplazar %1 con %2 en %3\";\nBlockly.Msg[\"TEXT_REPLACE_TOOLTIP\"] = \"Reemplazar todas las veces que un texto dentro de otro texto.\";\nBlockly.Msg[\"TEXT_REVERSE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#reversing-text\";\nBlockly.Msg[\"TEXT_REVERSE_MESSAGE0\"] = \"invertir %1\";\nBlockly.Msg[\"TEXT_REVERSE_TOOLTIP\"] = \"Invierte el orden de los caracteres en el texto.\";\nBlockly.Msg[\"TEXT_TEXT_HELPURL\"] = \"https://es.wikipedia.org/wiki/Cadena_de_caracteres\";\nBlockly.Msg[\"TEXT_TEXT_TOOLTIP\"] = \"Una letra, palabra o línea de texto.\";\nBlockly.Msg[\"TEXT_TRIM_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#trimming-removing-spaces\";  // untranslated\nBlockly.Msg[\"TEXT_TRIM_OPERATOR_BOTH\"] = \"quitar espacios de ambos lados de\";\nBlockly.Msg[\"TEXT_TRIM_OPERATOR_LEFT\"] = \"quitar espacios iniciales de\";\nBlockly.Msg[\"TEXT_TRIM_OPERATOR_RIGHT\"] = \"quitar espacios finales de\";\nBlockly.Msg[\"TEXT_TRIM_TOOLTIP\"] = \"Devuelve una copia del texto sin los espacios de uno o ambos extremos.\";\nBlockly.Msg[\"TODAY\"] = \"Hoy\";\nBlockly.Msg[\"UNDO\"] = \"Deshacer\";\nBlockly.Msg[\"UNNAMED_KEY\"] = \"Sin nombre\";\nBlockly.Msg[\"VARIABLES_DEFAULT_NAME\"] = \"elemento\";\nBlockly.Msg[\"VARIABLES_GET_CREATE_SET\"] = \"Crear 'establecer %1'\";\nBlockly.Msg[\"VARIABLES_GET_HELPURL\"] = \"https://github.com/google/blockly/wiki/Variables#get\";  // untranslated\nBlockly.Msg[\"VARIABLES_GET_TOOLTIP\"] = \"Devuelve el valor de esta variable.\";\nBlockly.Msg[\"VARIABLES_SET\"] = \"establecer %1 a %2\";\nBlockly.Msg[\"VARIABLES_SET_CREATE_GET\"] = \"Crear 'obtener %1'\";\nBlockly.Msg[\"VARIABLES_SET_HELPURL\"] = \"https://github.com/google/blockly/wiki/Variables#set\";  // untranslated\nBlockly.Msg[\"VARIABLES_SET_TOOLTIP\"] = \"Establece esta variable para que sea igual a la entrada.\";\nBlockly.Msg[\"VARIABLE_ALREADY_EXISTS\"] = \"Ya existe una variable llamada '%1'.\";\nBlockly.Msg[\"VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE\"] = \"Ya existe una variable nombrada '%1' para otra variable del tipo: '%2'.\";\nBlockly.Msg[\"WORKSPACE_ARIA_LABEL\"] = \"Espacio de trabajo de Blockly\";\nBlockly.Msg[\"WORKSPACE_COMMENT_DEFAULT_TEXT\"] = \"Di algo…\";\nBlockly.Msg[\"CONTROLS_FOREACH_INPUT_DO\"] = Blockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"];\nBlockly.Msg[\"CONTROLS_FOR_INPUT_DO\"] = Blockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"];\nBlockly.Msg[\"CONTROLS_IF_ELSEIF_TITLE_ELSEIF\"] = Blockly.Msg[\"CONTROLS_IF_MSG_ELSEIF\"];\nBlockly.Msg[\"CONTROLS_IF_ELSE_TITLE_ELSE\"] = Blockly.Msg[\"CONTROLS_IF_MSG_ELSE\"];\nBlockly.Msg[\"CONTROLS_IF_IF_TITLE_IF\"] = Blockly.Msg[\"CONTROLS_IF_MSG_IF\"];\nBlockly.Msg[\"CONTROLS_IF_MSG_THEN\"] = Blockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"];\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_INPUT_DO\"] = Blockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"];\nBlockly.Msg[\"LISTS_CREATE_WITH_ITEM_TITLE\"] = Blockly.Msg[\"VARIABLES_DEFAULT_NAME\"];\nBlockly.Msg[\"LISTS_GET_INDEX_HELPURL\"] = Blockly.Msg[\"LISTS_INDEX_OF_HELPURL\"];\nBlockly.Msg[\"LISTS_GET_INDEX_INPUT_IN_LIST\"] = Blockly.Msg[\"LISTS_INLIST\"];\nBlockly.Msg[\"LISTS_GET_SUBLIST_INPUT_IN_LIST\"] = Blockly.Msg[\"LISTS_INLIST\"];\nBlockly.Msg[\"LISTS_INDEX_OF_INPUT_IN_LIST\"] = Blockly.Msg[\"LISTS_INLIST\"];\nBlockly.Msg[\"LISTS_SET_INDEX_INPUT_IN_LIST\"] = Blockly.Msg[\"LISTS_INLIST\"];\nBlockly.Msg[\"MATH_CHANGE_TITLE_ITEM\"] = Blockly.Msg[\"VARIABLES_DEFAULT_NAME\"];\nBlockly.Msg[\"PROCEDURES_DEFRETURN_COMMENT\"] = Blockly.Msg[\"PROCEDURES_DEFNORETURN_COMMENT\"];\nBlockly.Msg[\"PROCEDURES_DEFRETURN_DO\"] = Blockly.Msg[\"PROCEDURES_DEFNORETURN_DO\"];\nBlockly.Msg[\"PROCEDURES_DEFRETURN_PROCEDURE\"] = Blockly.Msg[\"PROCEDURES_DEFNORETURN_PROCEDURE\"];\nBlockly.Msg[\"PROCEDURES_DEFRETURN_TITLE\"] = Blockly.Msg[\"PROCEDURES_DEFNORETURN_TITLE\"];\nBlockly.Msg[\"TEXT_APPEND_VARIABLE\"] = Blockly.Msg[\"VARIABLES_DEFAULT_NAME\"];\nBlockly.Msg[\"TEXT_CREATE_JOIN_ITEM_TITLE_ITEM\"] = Blockly.Msg[\"VARIABLES_DEFAULT_NAME\"];\n\nBlockly.Msg[\"MATH_HUE\"] = \"230\";\nBlockly.Msg[\"LOOPS_HUE\"] = \"120\";\nBlockly.Msg[\"LISTS_HUE\"] = \"260\";\nBlockly.Msg[\"LOGIC_HUE\"] = \"210\";\nBlockly.Msg[\"VARIABLES_HUE\"] = \"330\";\nBlockly.Msg[\"TEXTS_HUE\"] = \"160\";\nBlockly.Msg[\"PROCEDURES_HUE\"] = \"290\";\nBlockly.Msg[\"COLOUR_HUE\"] = \"20\";\nBlockly.Msg[\"VARIABLES_DYNAMIC_HUE\"] = \"310\";\nreturn Blockly.Msg;\n})); \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///wmsw\n");

/***/ })

}]);